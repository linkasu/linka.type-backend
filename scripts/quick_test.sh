#!/bin/bash

# –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
# –ó–∞–ø—É—Å–∫–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

set -e

echo "üöÄ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è"
echo "=============================="

# –¶–≤–µ—Ç–∞
GREEN='\033[0;32m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m'

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
check_dependencies() {
    print_info "–ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏..."
    
    if ! command -v go &> /dev/null; then
        print_error "Go –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        exit 1
    fi
    
    if ! command -v docker &> /dev/null; then
        print_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        exit 1
    fi
    
    print_success "–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –ó–∞–ø—É—Å–∫–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
start_db() {
    print_info "–ó–∞–ø—É—Å–∫–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö..."
    docker compose up -d db
    
    # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–∞–∑—ã
    print_info "–û–∂–∏–¥–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    timeout=30
    while ! docker compose exec -T db pg_isready -U postgres &> /dev/null; do
        sleep 1
        timeout=$((timeout - 1))
        if [ $timeout -le 0 ]; then
            print_error "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–∞—Å—å"
            exit 1
        fi
    done
    print_success "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞"
}

# –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
start_server() {
    print_info "–°–æ–±–∏—Ä–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä..."
    go build -o server cmd/server/main.go
    ./server &
    SERVER_PID=$!
    
    # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
    print_info "–û–∂–∏–¥–∞–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞..."
    timeout=15
    while ! curl -s http://localhost:8080/api/health &> /dev/null; do
        sleep 1
        timeout=$((timeout - 1))
        if [ $timeout -le 0 ]; then
            print_error "–°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è"
            kill $SERVER_PID 2>/dev/null || true
            exit 1
        fi
    done
    print_success "–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω"
}

# –û—á–∏—Å—Ç–∫–∞
cleanup() {
    print_info "–û—á–∏—Å—Ç–∫–∞..."
    if [ ! -z "$SERVER_PID" ]; then
        kill $SERVER_PID 2>/dev/null || true
    fi
    docker compose down 2>/dev/null || true
    rm -f server
}

trap cleanup EXIT

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    check_dependencies
    start_db
    start_server
    
    echo ""
    print_success "–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!"
    echo ""
    echo "üéØ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
    echo ""
    echo "1. –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π CLI (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º):"
    echo "   go run scripts/password_reset_cli.go --test"
    echo ""
    echo "2. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã:"
    echo "   go test ./tests/e2e/... -v -run TestPasswordReset"
    echo ""
    echo "3. –†—É—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:"
    echo "   curl -X POST http://localhost:8080/api/auth/reset-password \\"
    echo "     -H 'Content-Type: application/json' \\"
    echo "     -d '{\"email\": \"test@example.com\"}'"
    echo ""
    echo "4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:"
    echo "   docker-compose exec db psql -U postgres -d linkatype -c \"SELECT * FROM otp_codes;\""
    echo ""
    
    print_info "–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"
    wait
}

main 