package main

import (
	"bufio"
	"bytes"
	"encoding/json"
	"fmt"
	"net/http"
	"os"
	"os/exec"
	"strings"
	"time"

	"linka.type-backend/otp"
)

// PasswordResetCLI –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π CLI –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
type PasswordResetCLI struct {
	baseURL string
	reader  *bufio.Reader
}

// NewPasswordResetCLI —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π CLI —ç–∫–∑–µ–º–ø–ª—è—Ä
func NewPasswordResetCLI(baseURL string) *PasswordResetCLI {
	return &PasswordResetCLI{
		baseURL: baseURL,
		reader:  bufio.NewReader(os.Stdin),
	}
}

// readLine —á–∏—Ç–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –∏–∑ –∫–æ–Ω—Å–æ–ª–∏
func (cli *PasswordResetCLI) readLine(prompt string) string {
	fmt.Print(prompt)
	input, _ := cli.reader.ReadString('\n')
	return strings.TrimSpace(input)
}

// readPassword —á–∏—Ç–∞–µ—Ç –ø–∞—Ä–æ–ª—å –∏–∑ –∫–æ–Ω—Å–æ–ª–∏ (—Å–∫—Ä—ã–≤–∞—è –≤–≤–æ–¥)
func (cli *PasswordResetCLI) readPassword(prompt string) string {
	fmt.Print(prompt)
	input, _ := cli.reader.ReadString('\n')
	return strings.TrimSpace(input)
}

// makeRequest –≤—ã–ø–æ–ª–Ω—è–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å
func (cli *PasswordResetCLI) makeRequest(method, endpoint string, body interface{}) (*http.Response, error) {
	var reqBody []byte
	var err error

	if body != nil {
		reqBody, err = json.Marshal(body)
		if err != nil {
			return nil, fmt.Errorf("failed to marshal request body: %v", err)
		}
	}

	url := cli.baseURL + endpoint
	req, err := http.NewRequest(method, url, bytes.NewBuffer(reqBody))
	if err != nil {
		return nil, fmt.Errorf("failed to create request: %v", err)
	}

	req.Header.Set("Content-Type", "application/json")

	client := &http.Client{Timeout: 10 * time.Second}
	return client.Do(req)
}

// requestPasswordReset –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è
func (cli *PasswordResetCLI) requestPasswordReset(email string) error {
	fmt.Println("\nüîÑ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è...")

	reqBody := map[string]string{
		"email": email,
	}

	resp, err := cli.makeRequest("POST", "/api/auth/reset-password", reqBody)
	if err != nil {
		return fmt.Errorf("failed to make request: %v", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return fmt.Errorf("request failed with status: %d", resp.StatusCode)
	}

	fmt.Println("‚úÖ –ö–æ–¥ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à email")
	return nil
}

// getOTPFromDatabase –ø–æ–ª—É—á–∞–µ—Ç OTP –∫–æ–¥ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
func (cli *PasswordResetCLI) getOTPFromDatabase(email string) (string, error) {
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º Docker –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è OTP
	cmd := exec.Command("docker", "compose", "exec", "-T", "db", "psql", "-U", "postgres", "-d", "linkatype", "-c",
		fmt.Sprintf("SELECT code FROM otp_codes WHERE email = '%s' AND type = 'reset_password' ORDER BY created_at DESC LIMIT 1;", email))

	output, err := cmd.Output()
	if err != nil {
		return "", fmt.Errorf("failed to get OTP from database: %v", err)
	}

	// –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
	lines := strings.Split(string(output), "\n")
	for _, line := range lines {
		line = strings.TrimSpace(line)
		if line != "" && !strings.Contains(line, "code") && !strings.Contains(line, "----") && !strings.Contains(line, "(") {
			return line, nil
		}
	}

	return "", fmt.Errorf("no active OTP found for email: %s", email)
}

// verifyOTP –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç OTP –∫–æ–¥
func (cli *PasswordResetCLI) verifyOTP(email, code string) error {
	fmt.Println("\nüîç –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∫–æ–¥...")

	reqBody := map[string]string{
		"email": email,
		"code":  code,
	}

	resp, err := cli.makeRequest("POST", "/api/auth/reset-password/verify", reqBody)
	if err != nil {
		return fmt.Errorf("failed to make request: %v", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return fmt.Errorf("verification failed with status: %d", resp.StatusCode)
	}

	fmt.Println("‚úÖ –ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
	return nil
}

// confirmPasswordReset –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è
func (cli *PasswordResetCLI) confirmPasswordReset(email, code, newPassword string) error {
	fmt.Println("\nüîê –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å...")

	reqBody := map[string]string{
		"email":    email,
		"code":     code,
		"password": newPassword,
	}

	resp, err := cli.makeRequest("POST", "/api/auth/reset-password/confirm", reqBody)
	if err != nil {
		return fmt.Errorf("failed to make request: %v", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return fmt.Errorf("password reset failed with status: %d", resp.StatusCode)
	}

	fmt.Println("‚úÖ –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!")
	return nil
}

// validateEmail –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å email
func (cli *PasswordResetCLI) validateEmail(email string) bool {
	return strings.Contains(email, "@") && strings.Contains(email, ".")
}

// validatePassword –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–∞—Ä–æ–ª—è
func (cli *PasswordResetCLI) validatePassword(password string) (bool, string) {
	if len(password) < 6 {
		return false, "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤"
	}
	return true, ""
}

// validateOTP –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å OTP –∫–æ–¥–∞
func (cli *PasswordResetCLI) validateOTP(code string) bool {
	return otp.ValidateOTPCode(code)
}

// Run –∑–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
func (cli *PasswordResetCLI) Run() {
	fmt.Println("üîê –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è")
	fmt.Println("================================")

	// –®–∞–≥ 1: –í–≤–æ–¥ email
	var email string
	for {
		email = cli.readLine("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email: ")
		if cli.validateEmail(email) {
			break
		}
		fmt.Println("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
	}

	// –®–∞–≥ 2: –ó–∞–ø—Ä–æ—Å —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
	if err := cli.requestPasswordReset(email); err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è: %v\n", err)
		return
	}

	// –®–∞–≥ 3: –ü–æ–ª—É—á–µ–Ω–∏–µ OTP –∫–æ–¥–∞
	fmt.Println("\nüìß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à email –∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
	fmt.Println("üí° –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")

	var code string
	for {
		code = cli.readLine("–í–≤–µ–¥–∏—Ç–µ 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥: ")
		if cli.validateOTP(code) {
			break
		}
		fmt.Println("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–¥. –í–≤–µ–¥–∏—Ç–µ 6 —Ü–∏—Ñ—Ä.")
	}

	// –®–∞–≥ 4: –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è OTP
	if err := cli.verifyOTP(email, code); err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–¥–∞: %v\n", err)
		return
	}

	// –®–∞–≥ 5: –í–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è
	var newPassword string
	for {
		newPassword = cli.readPassword("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å: ")
		if valid, message := cli.validatePassword(newPassword); valid {
			break
		} else {
			fmt.Printf("‚ùå %s\n", message)
		}
	}

	// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
	confirmPassword := cli.readPassword("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å: ")
	if newPassword != confirmPassword {
		fmt.Println("‚ùå –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç.")
		return
	}

	// –®–∞–≥ 6: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
	if err := cli.confirmPasswordReset(email, code, newPassword); err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø–∞—Ä–æ–ª—è: %v\n", err)
		return
	}

	fmt.Println("\nüéâ –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
	fmt.Println("–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É —Å –Ω–æ–≤—ã–º –ø–∞—Ä–æ–ª–µ–º.")
}

// TestMode –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–æ–ª—É—á–µ–Ω–∏–µ–º OTP –∏–∑ –±–∞–∑—ã
func (cli *PasswordResetCLI) TestMode() {
	fmt.Println("üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è")
	fmt.Println("==================================")

	// –®–∞–≥ 1: –í–≤–æ–¥ email
	var email string
	for {
		email = cli.readLine("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email: ")
		if cli.validateEmail(email) {
			break
		}
		fmt.Println("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
	}

	// –®–∞–≥ 2: –ó–∞–ø—Ä–æ—Å —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
	if err := cli.requestPasswordReset(email); err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è: %v\n", err)
		return
	}

	// –®–∞–≥ 3: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ OTP –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	fmt.Println("\nüîç –ü–æ–ª—É—á–∞–µ–º OTP –∫–æ–¥ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
	code, err := cli.getOTPFromDatabase(email)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ OTP: %v\n", err)
		return
	}

	fmt.Printf("‚úÖ –ü–æ–ª—É—á–µ–Ω –∫–æ–¥: %s\n", code)

	// –®–∞–≥ 4: –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è OTP
	if err := cli.verifyOTP(email, code); err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–¥–∞: %v\n", err)
		return
	}

	// –®–∞–≥ 5: –í–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è
	var newPassword string
	for {
		newPassword = cli.readPassword("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å: ")
		if valid, message := cli.validatePassword(newPassword); valid {
			break
		} else {
			fmt.Printf("‚ùå %s\n", message)
		}
	}

	// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
	confirmPassword := cli.readPassword("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å: ")
	if newPassword != confirmPassword {
		fmt.Println("‚ùå –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç.")
		return
	}

	// –®–∞–≥ 6: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
	if err := cli.confirmPasswordReset(email, code, newPassword); err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø–∞—Ä–æ–ª—è: %v\n", err)
		return
	}

	fmt.Println("\nüéâ –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
	fmt.Println("–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É —Å –Ω–æ–≤—ã–º –ø–∞—Ä–æ–ª–µ–º.")
}

func main() {
	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ URL
	baseURL := "http://localhost:8080"
	if len(os.Args) > 1 {
		baseURL = os.Args[1]
	}

	cli := NewPasswordResetCLI(baseURL)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
	if len(os.Args) > 2 && os.Args[2] == "--test" {
		cli.TestMode()
	} else {
		fmt.Println("üí° –î–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: go run scripts/password_reset_cli.go [baseURL] --test")
		cli.Run()
	}
}
