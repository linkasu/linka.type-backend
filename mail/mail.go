package mail

import (
	"fmt"
	"os"
	"strconv"

	"gopkg.in/gomail.v2"
)

// MailConfig —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é SMTP
type MailConfig struct {
	Server   string
	Port     int
	Address  string
	Password string
}

// GetMailConfig –ø–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
func GetMailConfig() (*MailConfig, error) {
	server := os.Getenv("MAIL_SERVER")
	if server == "" {
		return nil, fmt.Errorf("MAIL_SERVER environment variable is required")
	}

	address := os.Getenv("MAIL_ADRESS")
	if address == "" {
		return nil, fmt.Errorf("MAIL_ADRESS environment variable is required")
	}

	password := os.Getenv("MAIL_PASSWORD")
	if password == "" {
		return nil, fmt.Errorf("MAIL_PASSWORD environment variable is required")
	}

	// –ü–æ—Ä—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è Yandex SMTP
	port := 587
	if portStr := os.Getenv("MAIL_PORT"); portStr != "" {
		if p, err := strconv.Atoi(portStr); err == nil {
			port = p
		}
	}

	return &MailConfig{
		Server:   server,
		Port:     port,
		Address:  address,
		Password: password,
	}, nil
}

// SendOTPEmail –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç email —Å OTP –∫–æ–¥–æ–º
func SendOTPEmail(to, otpCode, otpType string) error {
	config, err := GetMailConfig()
	if err != nil {
		return fmt.Errorf("failed to get mail config: %v", err)
	}

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–º—É –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ OTP
	var subject, body string
	switch otpType {
	case "registration":
		subject = "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ - Linka Type"
		body = fmt.Sprintf(`
			<h2>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Linka Type!</h2>
			<p>–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:</p>
			<h1 style="color: #3498db; font-size: 32px; text-align: center; padding: 20px; background: #f8f9fa; border-radius: 8px;">%s</h1>
			<p><strong>–ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç.</strong></p>
			<p>–ï—Å–ª–∏ –≤—ã –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ Linka Type, –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.</p>
		`, otpCode)
	case "reset_password":
		subject = "–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è - Linka Type"
		body = fmt.Sprintf(`
			<h2>–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è</h2>
			<p>–î–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –≤–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:</p>
			<h1 style="color: #e74c3c; font-size: 32px; text-align: center; padding: 20px; background: #f8f9fa; border-radius: 8px;">%s</h1>
			<p><strong>–ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç.</strong></p>
			<p>–ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è, –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.</p>
		`, otpCode)
	default:
		return fmt.Errorf("unknown OTP type: %s", otpType)
	}

	// –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	m := gomail.NewMessage()
	m.SetHeader("From", config.Address)
	m.SetHeader("To", to)
	m.SetHeader("Subject", subject)
	m.SetBody("text/html", body)

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º SMTP
	d := gomail.NewDialer(config.Server, config.Port, config.Address, config.Password)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
	if err := d.DialAndSend(m); err != nil {
		return fmt.Errorf("failed to send email: %v", err)
	}

	return nil
}

// SendWelcomeEmail –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email
func SendWelcomeEmail(to string) error {
	config, err := GetMailConfig()
	if err != nil {
		return fmt.Errorf("failed to get mail config: %v", err)
	}

	subject := "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Linka Type!"
	body := `
		<h2>üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</h2>
		<p>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Linka Type! –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.</p>
		<p>–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:</p>
		<ul>
			<li>–°–æ–∑–¥–∞–≤–∞—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏</li>
			<li>–î–æ–±–∞–≤–ª—è—Ç—å –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–∏ statements</li>
			<li>–ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</li>
		</ul>
		<p>–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!</p>
	`

	m := gomail.NewMessage()
	m.SetHeader("From", config.Address)
	m.SetHeader("To", to)
	m.SetHeader("Subject", subject)
	m.SetBody("text/html", body)

	d := gomail.NewDialer(config.Server, config.Port, config.Address, config.Password)

	if err := d.DialAndSend(m); err != nil {
		return fmt.Errorf("failed to send welcome email: %v", err)
	}

	return nil
}
